#!/bin/bash

set +e
. ./.kdr_env

MARIADB_IMAGE="docker.io/bitnami/mariadb:10.1.33"
db_host="mariadb-mariadb.db-apps.svc.cluster.local"

# Mariadb is like a great uncle trying to wake up in the morning.  Need to be polite and give time. 
mariadb_ip=$(kubectl --namespace db-apps get service mariadb-mariadb -o jsonpath='{@.spec.clusterIP}')

if [ 1 == 0 ] ; then
while ! mysqladmin ping -h"${mariadb_ip}" ; do
 sleep 5
 echo -n "."
done
#mariadb_ip=$(kubectl --namespace db-apps get service mariadb-mariadb -o jsonpath='{@.spec.clusterIP}')
#echo "Waiting for MariaDB to start..."
#while ! nc -z ${mariadb_ip} 3306 ; do sleep 1; done
echo ""
echo "MariaDB is up"


QUERY="while ! mysqladmin -u root -p${root_pass} ping -h${mariadb_ip} ; do sleep 1; done"
kubectl run mariadb-mariadb-client --image  ${MARIADB_IMAGE} --namespace db-apps --env "ALLOW_EMPTY_PASSWORD=yes" --restart=Never --command -- ${QUERY}

# Wait for database and account commands
client_pod='mariadb-mariadb-client'
until kubectl get pods ${client_pod} --namespace db-apps -o jsonpath='{.status.conditions[?(@.type=="Ready")].reason}'|grep 'PodCompleted' ; do sleep 5; echo -n "."; done

fi

# Stop the client as it is no longer needed
kubectl delete pod mariadb-mariadb-client --namespace db-apps

# Drop old database if it exists; Create test database; grant rights to use it"
QUERY="drop database if exists ${db_name}_test; create database ${db_name}_test; GRANT ALL ON ${db_name}_test.* TO '${db_user}'@'%';"

kubectl run mariadb-mariadb-client --image  ${MARIADB_IMAGE} --namespace db-apps --restart=Never --command -- mysql -h ${db_host} -uroot -p${root_pass} mysql -e "${QUERY}"

# Wait for database and account commands
client_pod='mariadb-mariadb-client'
until kubectl get pods ${client_pod} --namespace db-apps -o jsonpath='{.status.conditions[?(@.type=="Ready")].reason}'|grep 'PodCompleted' ; do sleep 5; echo -n "."; done

# Stop the client as it is no longer needed
kubectl delete pod mariadb-mariadb-client --namespace db-apps

set -e

